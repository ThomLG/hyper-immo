<?php

namespace App\Controller;

use App\Form\ResetPasswordFormType; use App\Form\ResetPasswordRequestFormType; use App\Repository\UserRepository; use App\Service\SendMailService; use Doctrine\ORM\EntityManager; use Doctrine\ORM\EntityManagerInterface; use Symfony\Bundle\FrameworkBundle\Controller\AbstractController; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface; use Symfony\Component\Routing\Annotation\Route; use Symfony\Component\Routing\Generator\UrlGeneratorInterface; use Symfony\Component\Security\Csrf\TokenGenerator\TokenGeneratorInterface; use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;

class SecurityController extends AbstractController { #[Route(path: '/login', name: 'app_login')] public function login(AuthenticationUtils $authenticationUtils): Response { // if ($this->getUser()) { // return $this->redirectToRoute('target_path'); // }

// get the login error if there is one $error = $authenticationUtils->getLastAuthenticationError(); // last username entered by the user $lastUsername = $authenticationUtils->getLastUsername();

return $this->render('security/login.html.twig', [ 'last_username' => $lastUsername, 'error' => $error ]); }

#[Route(path: '/logout', name: 'app_logout')] public function logout(): void { throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.'); }

#[Route('/oubli-pass', name: "forgotten_password")] public function forgottenPassword( Request $request, UserRepository $userRepository, TokenGeneratorInterface $tokenGeneratorInterface, EntityManagerInterface $entityManagerInterface, SendMailService $mail ): Response { $form = $this->createForm(ResetPasswordRequestFormType::class);

$form->handleRequest($request);

if($form->isSubmitted() && $form->isValid()){ // on va chercher l'utilisateur par son email

$user = $userRepository->findOneByEmail($form->get('email')->getData());

// On vérifier qu'on a bien un utilisateur avec l'email

if($user){ // on génère un token pour réinitialiser le mot de passe. $token=$tokenGeneratorInterface->generateToken(); $user->setResetToken($token); $entityManagerInterface->persist($user); $entityManagerInterface->flush();

// On génère un lien de réinitilisation du mot de passe $url = $this->generateUrl('reset-pass', ['token'=>$token], UrlGeneratorInterface::ABSOLUTE_URL); // renvoie une url complete (route + le token)

// on crée les données du mail $context = compact('url', 'user'); // recupere $url et $user

// On envoie le mail $mail->send( 'no-reply@hyper-immo.fr', // expéditeur $user->getEmail(), // à qui on l'envoie 'Réinitialisation mot de passe', // à qui on l'envoie 'passowrd_reset', // le template twig utilisé $context // le contexte utilisé );

$this->addFlash('success', 'Email envoyé'); return $this->redirectToRoute('app_login');

} // on a pas d'utilisateur avec cet email $this->addFlash('danger', 'un problème est survenu'); return $this->redirectToRoute('app_login'); } return $this->render('security/reset_password_request.html.twig', [ 'requestPassForm' => $form->createView() // on crée la forme du formulaire et on le passe à la vue. ]); }

#[Route('/oubli-pass/{token}', name: 'reset-pass' )] public function resetPass( string $token, Request $request, UserRepository $userRepository, EntityManagerInterface $entityManagerInterface, UserPasswordHasherInterface $passwordHasher ):Response { // On vérifie si on a le token dans la base de données.

$user = $userRepository->findOneByResetToken($token);

if ($user){ $form = $this->createForm(ResetPasswordFormType::class);

return $tihs->render('security/reset_password.html.twig',[ 'passForm'=>$form->createView() ]); } $this->addFlash('danger', 'Jeton invalide'); return $this->redirectToRoute('app_login'); } }{% extends 'base.html.twig' %}

{% block title %}
  Réinitialiser mot de passe
{% endblock %}

{% block body %}
  <section class="container my-3">
    <div class="row">
      <div class="col">
        <h1>Réinitialiser mot de passe</h1>

        {{ form_start(PassForm) }} {# On décompose notre formulaire pour que le button marche #}
        {{ form_row(PassForm.password) }} {# je place ma ligne email car sinon le button se retrouve au-dessus #}
        <button type="submit" class="btn btn-primary">Envoyer</button>
        {{ form_end(requestPassForm) }}
      </div>
    </div>
  </section>
{% endblock %}
